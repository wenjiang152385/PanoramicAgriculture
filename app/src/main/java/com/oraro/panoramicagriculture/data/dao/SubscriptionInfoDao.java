package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.SubscriptionInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUBSCRIPTION_INFO".
*/
public class SubscriptionInfoDao extends AbstractDao<SubscriptionInfo, Long> {

    public static final String TABLENAME = "SUBSCRIPTION_INFO";

    /**
     * Properties of entity SubscriptionInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PoNO = new Property(1, String.class, "poNO", false, "PO_NO");
        public final static Property ProductNO = new Property(2, Long.class, "productNO", false, "PRODUCT_NO");
        public final static Property FarmerNO = new Property(3, String.class, "farmerNO", false, "FARMER_NO");
        public final static Property Number = new Property(4, Double.class, "number", false, "NUMBER");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property Price = new Property(6, Double.class, "price", false, "PRICE");
        public final static Property LossRate = new Property(7, Double.class, "lossRate", false, "LOSS_RATE");
        public final static Property Date = new Property(8, java.util.Date.class, "date", false, "DATE");
        public final static Property Contract = new Property(9, String.class, "contract", false, "CONTRACT");
        public final static Property Check = new Property(10, int.class, "check", false, "CHECK");
    };


    public SubscriptionInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SubscriptionInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUBSCRIPTION_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PO_NO\" TEXT," + // 1: poNO
                "\"PRODUCT_NO\" INTEGER," + // 2: productNO
                "\"FARMER_NO\" TEXT," + // 3: farmerNO
                "\"NUMBER\" REAL," + // 4: number
                "\"UNIT\" TEXT," + // 5: unit
                "\"PRICE\" REAL," + // 6: price
                "\"LOSS_RATE\" REAL," + // 7: lossRate
                "\"DATE\" INTEGER," + // 8: date
                "\"CONTRACT\" TEXT," + // 9: contract
                "\"CHECK\" INTEGER NOT NULL );"); // 10: check
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUBSCRIPTION_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SubscriptionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poNO = entity.getPoNO();
        if (poNO != null) {
            stmt.bindString(2, poNO);
        }
 
        Long productNO = entity.getProductNO();
        if (productNO != null) {
            stmt.bindLong(3, productNO);
        }
 
        String farmerNO = entity.getFarmerNO();
        if (farmerNO != null) {
            stmt.bindString(4, farmerNO);
        }
 
        Double number = entity.getNumber();
        if (number != null) {
            stmt.bindDouble(5, number);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(7, price);
        }
 
        Double lossRate = entity.getLossRate();
        if (lossRate != null) {
            stmt.bindDouble(8, lossRate);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
 
        String contract = entity.getContract();
        if (contract != null) {
            stmt.bindString(10, contract);
        }
        stmt.bindLong(11, entity.getCheck());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SubscriptionInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poNO = entity.getPoNO();
        if (poNO != null) {
            stmt.bindString(2, poNO);
        }
 
        Long productNO = entity.getProductNO();
        if (productNO != null) {
            stmt.bindLong(3, productNO);
        }
 
        String farmerNO = entity.getFarmerNO();
        if (farmerNO != null) {
            stmt.bindString(4, farmerNO);
        }
 
        Double number = entity.getNumber();
        if (number != null) {
            stmt.bindDouble(5, number);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(7, price);
        }
 
        Double lossRate = entity.getLossRate();
        if (lossRate != null) {
            stmt.bindDouble(8, lossRate);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
 
        String contract = entity.getContract();
        if (contract != null) {
            stmt.bindString(10, contract);
        }
        stmt.bindLong(11, entity.getCheck());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SubscriptionInfo readEntity(Cursor cursor, int offset) {
        SubscriptionInfo entity = new SubscriptionInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // poNO
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // productNO
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // farmerNO
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // price
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // lossRate
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // contract
            cursor.getInt(offset + 10) // check
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SubscriptionInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoNO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductNO(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFarmerNO(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumber(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrice(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setLossRate(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setContract(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCheck(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SubscriptionInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SubscriptionInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
