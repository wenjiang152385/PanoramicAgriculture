package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property UserRole = new Property(4, Long.class, "userRole", false, "USER_ROLE");
        public final static Property PhoneNumber = new Property(5, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property IdentityNumber = new Property(6, String.class, "identityNumber", false, "IDENTITY_NUMBER");
        public final static Property Sex = new Property(7, int.class, "sex", false, "SEX");
        public final static Property UserGroup = new Property(8, int.class, "userGroup", false, "USER_GROUP");
        public final static Property Head = new Property(9, String.class, "head", false, "HEAD");
        public final static Property Points = new Property(10, int.class, "points", false, "POINTS");
        public final static Property ClientId = new Property(11, String.class, "clientId", false, "CLIENT_ID");
    };


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userId
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"PASSWORD\" TEXT," + // 2: password
                "\"NICK_NAME\" TEXT," + // 3: nickName
                "\"USER_ROLE\" INTEGER," + // 4: userRole
                "\"PHONE_NUMBER\" TEXT," + // 5: phoneNumber
                "\"IDENTITY_NUMBER\" TEXT," + // 6: identityNumber
                "\"SEX\" INTEGER NOT NULL ," + // 7: sex
                "\"USER_GROUP\" INTEGER NOT NULL ," + // 8: userGroup
                "\"HEAD\" TEXT," + // 9: head
                "\"POINTS\" INTEGER NOT NULL ," + // 10: points
                "\"CLIENT_ID\" TEXT);"); // 11: clientId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        Long userRole = entity.getUserRole();
        if (userRole != null) {
            stmt.bindLong(5, userRole);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(6, phoneNumber);
        }
 
        String identityNumber = entity.getIdentityNumber();
        if (identityNumber != null) {
            stmt.bindString(7, identityNumber);
        }
        stmt.bindLong(8, entity.getSex());
        stmt.bindLong(9, entity.getUserGroup());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(10, head);
        }
        stmt.bindLong(11, entity.getPoints());
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(12, clientId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
 
        Long userRole = entity.getUserRole();
        if (userRole != null) {
            stmt.bindLong(5, userRole);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(6, phoneNumber);
        }
 
        String identityNumber = entity.getIdentityNumber();
        if (identityNumber != null) {
            stmt.bindString(7, identityNumber);
        }
        stmt.bindLong(8, entity.getSex());
        stmt.bindLong(9, entity.getUserGroup());
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(10, head);
        }
        stmt.bindLong(11, entity.getPoints());
 
        String clientId = entity.getClientId();
        if (clientId != null) {
            stmt.bindString(12, clientId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // userRole
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phoneNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // identityNumber
            cursor.getInt(offset + 7), // sex
            cursor.getInt(offset + 8), // userGroup
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // head
            cursor.getInt(offset + 10), // points
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // clientId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserRole(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPhoneNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIdentityNumber(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSex(cursor.getInt(offset + 7));
        entity.setUserGroup(cursor.getInt(offset + 8));
        entity.setHead(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPoints(cursor.getInt(offset + 10));
        entity.setClientId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
