package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.Distribution;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISTRIBUTION".
*/
public class DistributionDao extends AbstractDao<Distribution, Long> {

    public static final String TABLENAME = "DISTRIBUTION";

    /**
     * Properties of entity Distribution.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property State = new Property(1, int.class, "state", false, "STATE");
        public final static Property StartDate = new Property(2, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(3, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property VfcropsId = new Property(4, long.class, "vfcropsId", false, "VFCROPS_ID");
        public final static Property DcId = new Property(5, long.class, "dcId", false, "DC_ID");
        public final static Property Num = new Property(6, long.class, "num", false, "NUM");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
        public final static Property PurchaseneedsId = new Property(8, long.class, "purchaseneedsId", false, "PURCHASENEEDS_ID");
    };


    public DistributionDao(DaoConfig config) {
        super(config);
    }
    
    public DistributionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISTRIBUTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"STATE\" INTEGER NOT NULL ," + // 1: state
                "\"START_DATE\" INTEGER," + // 2: startDate
                "\"END_DATE\" INTEGER," + // 3: endDate
                "\"VFCROPS_ID\" INTEGER NOT NULL ," + // 4: vfcropsId
                "\"DC_ID\" INTEGER NOT NULL ," + // 5: dcId
                "\"NUM\" INTEGER NOT NULL ," + // 6: num
                "\"DATE\" INTEGER," + // 7: date
                "\"PURCHASENEEDS_ID\" INTEGER NOT NULL );"); // 8: purchaseneedsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISTRIBUTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Distribution entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getState());
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(3, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
        stmt.bindLong(5, entity.getVfcropsId());
        stmt.bindLong(6, entity.getDcId());
        stmt.bindLong(7, entity.getNum());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
        stmt.bindLong(9, entity.getPurchaseneedsId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Distribution entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getState());
 
        java.util.Date startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindLong(3, startDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(4, endDate.getTime());
        }
        stmt.bindLong(5, entity.getVfcropsId());
        stmt.bindLong(6, entity.getDcId());
        stmt.bindLong(7, entity.getNum());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
        stmt.bindLong(9, entity.getPurchaseneedsId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Distribution readEntity(Cursor cursor, int offset) {
        Distribution entity = new Distribution( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // state
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // startDate
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // endDate
            cursor.getLong(offset + 4), // vfcropsId
            cursor.getLong(offset + 5), // dcId
            cursor.getLong(offset + 6), // num
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // date
            cursor.getLong(offset + 8) // purchaseneedsId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Distribution entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setState(cursor.getInt(offset + 1));
        entity.setStartDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setEndDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setVfcropsId(cursor.getLong(offset + 4));
        entity.setDcId(cursor.getLong(offset + 5));
        entity.setNum(cursor.getLong(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setPurchaseneedsId(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Distribution entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Distribution entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
