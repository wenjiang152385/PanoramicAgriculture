package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.CropsResults;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CROPS_RESULTS".
*/
public class CropsResultsDao extends AbstractDao<CropsResults, Long> {

    public static final String TABLENAME = "CROPS_RESULTS";

    /**
     * Properties of entity CropsResults.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Price = new Property(1, Double.class, "price", false, "PRICE");
        public final static Property Allkg = new Property(2, Double.class, "allkg", false, "ALLKG");
        public final static Property FarmId = new Property(3, Long.class, "farmId", false, "FARM_ID");
        public final static Property Pretime = new Property(4, Long.class, "pretime", false, "PRETIME");
        public final static Property Cropid = new Property(5, Long.class, "cropid", false, "CROPID");
        public final static Property Time = new Property(6, int.class, "time", false, "TIME");
        public final static Property Cropname = new Property(7, String.class, "cropname", false, "CROPNAME");
    };


    public CropsResultsDao(DaoConfig config) {
        super(config);
    }
    
    public CropsResultsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CROPS_RESULTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRICE\" REAL," + // 1: price
                "\"ALLKG\" REAL," + // 2: allkg
                "\"FARM_ID\" INTEGER," + // 3: farmId
                "\"PRETIME\" INTEGER," + // 4: pretime
                "\"CROPID\" INTEGER," + // 5: cropid
                "\"TIME\" INTEGER NOT NULL ," + // 6: time
                "\"CROPNAME\" TEXT);"); // 7: cropname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CROPS_RESULTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CropsResults entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(2, price);
        }
 
        Double allkg = entity.getAllkg();
        if (allkg != null) {
            stmt.bindDouble(3, allkg);
        }
 
        Long farmId = entity.getFarmId();
        if (farmId != null) {
            stmt.bindLong(4, farmId);
        }
 
        Long pretime = entity.getPretime();
        if (pretime != null) {
            stmt.bindLong(5, pretime);
        }
 
        Long cropid = entity.getCropid();
        if (cropid != null) {
            stmt.bindLong(6, cropid);
        }
        stmt.bindLong(7, entity.getTime());
 
        String cropname = entity.getCropname();
        if (cropname != null) {
            stmt.bindString(8, cropname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CropsResults entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(2, price);
        }
 
        Double allkg = entity.getAllkg();
        if (allkg != null) {
            stmt.bindDouble(3, allkg);
        }
 
        Long farmId = entity.getFarmId();
        if (farmId != null) {
            stmt.bindLong(4, farmId);
        }
 
        Long pretime = entity.getPretime();
        if (pretime != null) {
            stmt.bindLong(5, pretime);
        }
 
        Long cropid = entity.getCropid();
        if (cropid != null) {
            stmt.bindLong(6, cropid);
        }
        stmt.bindLong(7, entity.getTime());
 
        String cropname = entity.getCropname();
        if (cropname != null) {
            stmt.bindString(8, cropname);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CropsResults readEntity(Cursor cursor, int offset) {
        CropsResults entity = new CropsResults( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // price
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // allkg
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // farmId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // pretime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // cropid
            cursor.getInt(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // cropname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CropsResults entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrice(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setAllkg(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setFarmId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setPretime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCropid(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTime(cursor.getInt(offset + 6));
        entity.setCropname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CropsResults entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CropsResults entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
