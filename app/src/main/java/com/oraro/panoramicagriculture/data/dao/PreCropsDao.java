package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.PreCrops;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRE_CROPS".
*/
public class PreCropsDao extends AbstractDao<PreCrops, Long> {

    public static final String TABLENAME = "PRE_CROPS";

    /**
     * Properties of entity PreCrops.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Preid = new Property(0, Long.class, "preid", true, "_id");
        public final static Property Cropid = new Property(1, Long.class, "cropid", false, "CROPID");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property Farmid = new Property(3, Long.class, "farmid", false, "FARMID");
        public final static Property Kg = new Property(4, int.class, "kg", false, "KG");
        public final static Property Area = new Property(5, int.class, "area", false, "AREA");
        public final static Property Price = new Property(6, int.class, "price", false, "PRICE");
    };


    public PreCropsDao(DaoConfig config) {
        super(config);
    }
    
    public PreCropsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRE_CROPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: preid
                "\"CROPID\" INTEGER," + // 1: cropid
                "\"USER_ID\" INTEGER," + // 2: userId
                "\"FARMID\" INTEGER," + // 3: farmid
                "\"KG\" INTEGER NOT NULL ," + // 4: kg
                "\"AREA\" INTEGER NOT NULL ," + // 5: area
                "\"PRICE\" INTEGER NOT NULL );"); // 6: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRE_CROPS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PreCrops entity) {
        stmt.clearBindings();
 
        Long preid = entity.getPreid();
        if (preid != null) {
            stmt.bindLong(1, preid);
        }
 
        Long cropid = entity.getCropid();
        if (cropid != null) {
            stmt.bindLong(2, cropid);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        Long farmid = entity.getFarmid();
        if (farmid != null) {
            stmt.bindLong(4, farmid);
        }
        stmt.bindLong(5, entity.getKg());
        stmt.bindLong(6, entity.getArea());
        stmt.bindLong(7, entity.getPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PreCrops entity) {
        stmt.clearBindings();
 
        Long preid = entity.getPreid();
        if (preid != null) {
            stmt.bindLong(1, preid);
        }
 
        Long cropid = entity.getCropid();
        if (cropid != null) {
            stmt.bindLong(2, cropid);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
 
        Long farmid = entity.getFarmid();
        if (farmid != null) {
            stmt.bindLong(4, farmid);
        }
        stmt.bindLong(5, entity.getKg());
        stmt.bindLong(6, entity.getArea());
        stmt.bindLong(7, entity.getPrice());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PreCrops readEntity(Cursor cursor, int offset) {
        PreCrops entity = new PreCrops( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // preid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // cropid
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // farmid
            cursor.getInt(offset + 4), // kg
            cursor.getInt(offset + 5), // area
            cursor.getInt(offset + 6) // price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PreCrops entity, int offset) {
        entity.setPreid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCropid(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFarmid(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setKg(cursor.getInt(offset + 4));
        entity.setArea(cursor.getInt(offset + 5));
        entity.setPrice(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PreCrops entity, long rowId) {
        entity.setPreid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PreCrops entity) {
        if(entity != null) {
            return entity.getPreid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
