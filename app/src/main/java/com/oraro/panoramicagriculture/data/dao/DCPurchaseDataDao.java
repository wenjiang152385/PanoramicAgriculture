package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.DCPurchaseData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DCPURCHASE_DATA".
*/
public class DCPurchaseDataDao extends AbstractDao<DCPurchaseData, Long> {

    public static final String TABLENAME = "DCPURCHASE_DATA";

    /**
     * Properties of entity DCPurchaseData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property VfcropsId = new Property(1, long.class, "vfcropsId", false, "VFCROPS_ID");
        public final static Property ExpectneedsNum = new Property(2, long.class, "expectneedsNum", false, "EXPECTNEEDS_NUM");
        public final static Property Date = new Property(3, String.class, "date", false, "DATE");
        public final static Property Dcid = new Property(4, long.class, "dcid", false, "DCID");
    };


    public DCPurchaseDataDao(DaoConfig config) {
        super(config);
    }
    
    public DCPurchaseDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DCPURCHASE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"VFCROPS_ID\" INTEGER NOT NULL ," + // 1: vfcropsId
                "\"EXPECTNEEDS_NUM\" INTEGER NOT NULL ," + // 2: expectneedsNum
                "\"DATE\" TEXT," + // 3: date
                "\"DCID\" INTEGER NOT NULL );"); // 4: dcid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DCPURCHASE_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DCPurchaseData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getVfcropsId());
        stmt.bindLong(3, entity.getExpectneedsNum());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
        stmt.bindLong(5, entity.getDcid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DCPurchaseData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getVfcropsId());
        stmt.bindLong(3, entity.getExpectneedsNum());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(4, date);
        }
        stmt.bindLong(5, entity.getDcid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DCPurchaseData readEntity(Cursor cursor, int offset) {
        DCPurchaseData entity = new DCPurchaseData( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // vfcropsId
            cursor.getLong(offset + 2), // expectneedsNum
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // date
            cursor.getLong(offset + 4) // dcid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DCPurchaseData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setVfcropsId(cursor.getLong(offset + 1));
        entity.setExpectneedsNum(cursor.getLong(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDcid(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DCPurchaseData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DCPurchaseData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
