package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.PurchaseOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE_ORDER".
*/
public class PurchaseOrderDao extends AbstractDao<PurchaseOrder, Long> {

    public static final String TABLENAME = "PURCHASE_ORDER";

    /**
     * Properties of entity PurchaseOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PoNO = new Property(1, String.class, "poNO", false, "PO_NO");
        public final static Property OrderTime = new Property(2, java.util.Date.class, "orderTime", false, "ORDER_TIME");
        public final static Property Buyer = new Property(3, String.class, "buyer", false, "BUYER");
        public final static Property TotalMoney = new Property(4, Double.class, "totalMoney", false, "TOTAL_MONEY");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property ContractNO = new Property(6, Long.class, "contractNO", false, "CONTRACT_NO");
        public final static Property ShippingTime = new Property(7, java.util.Date.class, "shippingTime", false, "SHIPPING_TIME");
        public final static Property DeadLine = new Property(8, java.util.Date.class, "deadLine", false, "DEAD_LINE");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property TaxType = new Property(10, int.class, "taxType", false, "TAX_TYPE");
        public final static Property TaxRate = new Property(11, Double.class, "taxRate", false, "TAX_RATE");
        public final static Property NeedInvoice = new Property(12, Boolean.class, "needInvoice", false, "NEED_INVOICE");
        public final static Property CurrencyKind = new Property(13, String.class, "currencyKind", false, "CURRENCY_KIND");
    };


    public PurchaseOrderDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE_ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PO_NO\" TEXT," + // 1: poNO
                "\"ORDER_TIME\" INTEGER," + // 2: orderTime
                "\"BUYER\" TEXT," + // 3: buyer
                "\"TOTAL_MONEY\" REAL," + // 4: totalMoney
                "\"ADDRESS\" TEXT," + // 5: address
                "\"CONTRACT_NO\" INTEGER," + // 6: contractNO
                "\"SHIPPING_TIME\" INTEGER," + // 7: shippingTime
                "\"DEAD_LINE\" INTEGER," + // 8: deadLine
                "\"TYPE\" INTEGER NOT NULL ," + // 9: type
                "\"TAX_TYPE\" INTEGER NOT NULL ," + // 10: taxType
                "\"TAX_RATE\" REAL," + // 11: taxRate
                "\"NEED_INVOICE\" INTEGER," + // 12: needInvoice
                "\"CURRENCY_KIND\" TEXT);"); // 13: currencyKind
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PurchaseOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poNO = entity.getPoNO();
        if (poNO != null) {
            stmt.bindString(2, poNO);
        }
 
        java.util.Date orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindLong(3, orderTime.getTime());
        }
 
        String buyer = entity.getBuyer();
        if (buyer != null) {
            stmt.bindString(4, buyer);
        }
 
        Double totalMoney = entity.getTotalMoney();
        if (totalMoney != null) {
            stmt.bindDouble(5, totalMoney);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        Long contractNO = entity.getContractNO();
        if (contractNO != null) {
            stmt.bindLong(7, contractNO);
        }
 
        java.util.Date shippingTime = entity.getShippingTime();
        if (shippingTime != null) {
            stmt.bindLong(8, shippingTime.getTime());
        }
 
        java.util.Date deadLine = entity.getDeadLine();
        if (deadLine != null) {
            stmt.bindLong(9, deadLine.getTime());
        }
        stmt.bindLong(10, entity.getType());
        stmt.bindLong(11, entity.getTaxType());
 
        Double taxRate = entity.getTaxRate();
        if (taxRate != null) {
            stmt.bindDouble(12, taxRate);
        }
 
        Boolean needInvoice = entity.getNeedInvoice();
        if (needInvoice != null) {
            stmt.bindLong(13, needInvoice ? 1L: 0L);
        }
 
        String currencyKind = entity.getCurrencyKind();
        if (currencyKind != null) {
            stmt.bindString(14, currencyKind);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PurchaseOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poNO = entity.getPoNO();
        if (poNO != null) {
            stmt.bindString(2, poNO);
        }
 
        java.util.Date orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindLong(3, orderTime.getTime());
        }
 
        String buyer = entity.getBuyer();
        if (buyer != null) {
            stmt.bindString(4, buyer);
        }
 
        Double totalMoney = entity.getTotalMoney();
        if (totalMoney != null) {
            stmt.bindDouble(5, totalMoney);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        Long contractNO = entity.getContractNO();
        if (contractNO != null) {
            stmt.bindLong(7, contractNO);
        }
 
        java.util.Date shippingTime = entity.getShippingTime();
        if (shippingTime != null) {
            stmt.bindLong(8, shippingTime.getTime());
        }
 
        java.util.Date deadLine = entity.getDeadLine();
        if (deadLine != null) {
            stmt.bindLong(9, deadLine.getTime());
        }
        stmt.bindLong(10, entity.getType());
        stmt.bindLong(11, entity.getTaxType());
 
        Double taxRate = entity.getTaxRate();
        if (taxRate != null) {
            stmt.bindDouble(12, taxRate);
        }
 
        Boolean needInvoice = entity.getNeedInvoice();
        if (needInvoice != null) {
            stmt.bindLong(13, needInvoice ? 1L: 0L);
        }
 
        String currencyKind = entity.getCurrencyKind();
        if (currencyKind != null) {
            stmt.bindString(14, currencyKind);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PurchaseOrder readEntity(Cursor cursor, int offset) {
        PurchaseOrder entity = new PurchaseOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // poNO
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // orderTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // buyer
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // totalMoney
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // contractNO
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // shippingTime
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // deadLine
            cursor.getInt(offset + 9), // type
            cursor.getInt(offset + 10), // taxType
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // taxRate
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // needInvoice
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // currencyKind
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PurchaseOrder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoNO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setBuyer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalMoney(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContractNO(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setShippingTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setDeadLine(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setType(cursor.getInt(offset + 9));
        entity.setTaxType(cursor.getInt(offset + 10));
        entity.setTaxRate(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setNeedInvoice(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setCurrencyKind(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PurchaseOrder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PurchaseOrder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
