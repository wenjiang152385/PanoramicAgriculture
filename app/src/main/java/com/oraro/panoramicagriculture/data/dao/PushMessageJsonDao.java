package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.PushMessageJson;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PUSH_MESSAGE_JSON".
*/
public class PushMessageJsonDao extends AbstractDao<PushMessageJson, Long> {

    public static final String TABLENAME = "PUSH_MESSAGE_JSON";

    /**
     * Properties of entity PushMessageJson.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MessageId = new Property(0, long.class, "messageId", true, "_id");
        public final static Property Messagetitle = new Property(1, String.class, "messagetitle", false, "MESSAGETITLE");
        public final static Property Messagecontent = new Property(2, String.class, "messagecontent", false, "MESSAGECONTENT");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property State = new Property(4, int.class, "state", false, "STATE");
        public final static Property SendTime = new Property(5, java.util.Date.class, "sendTime", false, "SEND_TIME");
    };


    public PushMessageJsonDao(DaoConfig config) {
        super(config);
    }
    
    public PushMessageJsonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PUSH_MESSAGE_JSON\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: messageId
                "\"MESSAGETITLE\" TEXT," + // 1: messagetitle
                "\"MESSAGECONTENT\" TEXT," + // 2: messagecontent
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"STATE\" INTEGER NOT NULL ," + // 4: state
                "\"SEND_TIME\" INTEGER);"); // 5: sendTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PUSH_MESSAGE_JSON\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PushMessageJson entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMessageId());
 
        String messagetitle = entity.getMessagetitle();
        if (messagetitle != null) {
            stmt.bindString(2, messagetitle);
        }
 
        String messagecontent = entity.getMessagecontent();
        if (messagecontent != null) {
            stmt.bindString(3, messagecontent);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getState());
 
        java.util.Date sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(6, sendTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PushMessageJson entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMessageId());
 
        String messagetitle = entity.getMessagetitle();
        if (messagetitle != null) {
            stmt.bindString(2, messagetitle);
        }
 
        String messagecontent = entity.getMessagecontent();
        if (messagecontent != null) {
            stmt.bindString(3, messagecontent);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getState());
 
        java.util.Date sendTime = entity.getSendTime();
        if (sendTime != null) {
            stmt.bindLong(6, sendTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public PushMessageJson readEntity(Cursor cursor, int offset) {
        PushMessageJson entity = new PushMessageJson( //
            cursor.getLong(offset + 0), // messageId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // messagetitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // messagecontent
            cursor.getInt(offset + 3), // type
            cursor.getInt(offset + 4), // state
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)) // sendTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PushMessageJson entity, int offset) {
        entity.setMessageId(cursor.getLong(offset + 0));
        entity.setMessagetitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMessagecontent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setState(cursor.getInt(offset + 4));
        entity.setSendTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PushMessageJson entity, long rowId) {
        entity.setMessageId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PushMessageJson entity) {
        if(entity != null) {
            return entity.getMessageId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
