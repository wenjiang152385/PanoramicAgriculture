package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.Crops;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CROPS".
*/
public class CropsDao extends AbstractDao<Crops, Long> {

    public static final String TABLENAME = "CROPS";

    /**
     * Properties of entity Crops.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cropid = new Property(0, Long.class, "cropid", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Byname = new Property(2, String.class, "byname", false, "BYNAME");
        public final static Property Type1 = new Property(3, Long.class, "type1", false, "TYPE1");
        public final static Property Type2 = new Property(4, String.class, "type2", false, "TYPE2");
        public final static Property Classes = new Property(5, String.class, "classes", false, "CLASSES");
        public final static Property Family = new Property(6, String.class, "family", false, "FAMILY");
        public final static Property PicPath = new Property(7, String.class, "picPath", false, "PIC_PATH");
    };


    public CropsDao(DaoConfig config) {
        super(config);
    }
    
    public CropsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CROPS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: cropid
                "\"NAME\" TEXT," + // 1: name
                "\"BYNAME\" TEXT," + // 2: byname
                "\"TYPE1\" INTEGER," + // 3: type1
                "\"TYPE2\" TEXT," + // 4: type2
                "\"CLASSES\" TEXT," + // 5: classes
                "\"FAMILY\" TEXT," + // 6: family
                "\"PIC_PATH\" TEXT);"); // 7: picPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CROPS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Crops entity) {
        stmt.clearBindings();
 
        Long cropid = entity.getCropid();
        if (cropid != null) {
            stmt.bindLong(1, cropid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String byname = entity.getByname();
        if (byname != null) {
            stmt.bindString(3, byname);
        }
 
        Long type1 = entity.getType1();
        if (type1 != null) {
            stmt.bindLong(4, type1);
        }
 
        String type2 = entity.getType2();
        if (type2 != null) {
            stmt.bindString(5, type2);
        }
 
        String classes = entity.getClasses();
        if (classes != null) {
            stmt.bindString(6, classes);
        }
 
        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(7, family);
        }
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(8, picPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Crops entity) {
        stmt.clearBindings();
 
        Long cropid = entity.getCropid();
        if (cropid != null) {
            stmt.bindLong(1, cropid);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String byname = entity.getByname();
        if (byname != null) {
            stmt.bindString(3, byname);
        }
 
        Long type1 = entity.getType1();
        if (type1 != null) {
            stmt.bindLong(4, type1);
        }
 
        String type2 = entity.getType2();
        if (type2 != null) {
            stmt.bindString(5, type2);
        }
 
        String classes = entity.getClasses();
        if (classes != null) {
            stmt.bindString(6, classes);
        }
 
        String family = entity.getFamily();
        if (family != null) {
            stmt.bindString(7, family);
        }
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(8, picPath);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Crops readEntity(Cursor cursor, int offset) {
        Crops entity = new Crops( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cropid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // byname
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // type1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // classes
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // family
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // picPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Crops entity, int offset) {
        entity.setCropid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setByname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType1(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setType2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClasses(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFamily(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPicPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Crops entity, long rowId) {
        entity.setCropid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Crops entity) {
        if(entity != null) {
            return entity.getCropid();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
