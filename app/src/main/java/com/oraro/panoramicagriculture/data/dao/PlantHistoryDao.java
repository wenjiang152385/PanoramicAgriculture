package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.PlantHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLANT_HISTORY".
*/
public class PlantHistoryDao extends AbstractDao<PlantHistory, Long> {

    public static final String TABLENAME = "PLANT_HISTORY";

    /**
     * Properties of entity PlantHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AnAcreLandId = new Property(1, Long.class, "anAcreLandId", false, "AN_ACRE_LAND_ID");
        public final static Property VfcropsId = new Property(2, long.class, "vfcropsId", false, "VFCROPS_ID");
        public final static Property PlantTime = new Property(3, java.util.Date.class, "plantTime", false, "PLANT_TIME");
        public final static Property HarvestTime = new Property(4, java.util.Date.class, "harvestTime", false, "HARVEST_TIME");
        public final static Property ExpectHarvestNum = new Property(5, long.class, "expectHarvestNum", false, "EXPECT_HARVEST_NUM");
        public final static Property PlantNum = new Property(6, long.class, "plantNum", false, "PLANT_NUM");
        public final static Property ActualHarvestNum = new Property(7, long.class, "actualHarvestNum", false, "ACTUAL_HARVEST_NUM");
    };


    public PlantHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public PlantHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLANT_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AN_ACRE_LAND_ID\" INTEGER," + // 1: anAcreLandId
                "\"VFCROPS_ID\" INTEGER NOT NULL ," + // 2: vfcropsId
                "\"PLANT_TIME\" INTEGER," + // 3: plantTime
                "\"HARVEST_TIME\" INTEGER," + // 4: harvestTime
                "\"EXPECT_HARVEST_NUM\" INTEGER NOT NULL ," + // 5: expectHarvestNum
                "\"PLANT_NUM\" INTEGER NOT NULL ," + // 6: plantNum
                "\"ACTUAL_HARVEST_NUM\" INTEGER NOT NULL );"); // 7: actualHarvestNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLANT_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlantHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long anAcreLandId = entity.getAnAcreLandId();
        if (anAcreLandId != null) {
            stmt.bindLong(2, anAcreLandId);
        }
        stmt.bindLong(3, entity.getVfcropsId());
 
        java.util.Date plantTime = entity.getPlantTime();
        if (plantTime != null) {
            stmt.bindLong(4, plantTime.getTime());
        }
 
        java.util.Date harvestTime = entity.getHarvestTime();
        if (harvestTime != null) {
            stmt.bindLong(5, harvestTime.getTime());
        }
        stmt.bindLong(6, entity.getExpectHarvestNum());
        stmt.bindLong(7, entity.getPlantNum());
        stmt.bindLong(8, entity.getActualHarvestNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlantHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long anAcreLandId = entity.getAnAcreLandId();
        if (anAcreLandId != null) {
            stmt.bindLong(2, anAcreLandId);
        }
        stmt.bindLong(3, entity.getVfcropsId());
 
        java.util.Date plantTime = entity.getPlantTime();
        if (plantTime != null) {
            stmt.bindLong(4, plantTime.getTime());
        }
 
        java.util.Date harvestTime = entity.getHarvestTime();
        if (harvestTime != null) {
            stmt.bindLong(5, harvestTime.getTime());
        }
        stmt.bindLong(6, entity.getExpectHarvestNum());
        stmt.bindLong(7, entity.getPlantNum());
        stmt.bindLong(8, entity.getActualHarvestNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlantHistory readEntity(Cursor cursor, int offset) {
        PlantHistory entity = new PlantHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // anAcreLandId
            cursor.getLong(offset + 2), // vfcropsId
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // plantTime
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // harvestTime
            cursor.getLong(offset + 5), // expectHarvestNum
            cursor.getLong(offset + 6), // plantNum
            cursor.getLong(offset + 7) // actualHarvestNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlantHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAnAcreLandId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setVfcropsId(cursor.getLong(offset + 2));
        entity.setPlantTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setHarvestTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setExpectHarvestNum(cursor.getLong(offset + 5));
        entity.setPlantNum(cursor.getLong(offset + 6));
        entity.setActualHarvestNum(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlantHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlantHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
