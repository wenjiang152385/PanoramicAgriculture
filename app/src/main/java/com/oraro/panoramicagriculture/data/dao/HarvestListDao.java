package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.HarvestList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HARVEST_LIST".
*/
public class HarvestListDao extends AbstractDao<HarvestList, Long> {

    public static final String TABLENAME = "HARVEST_LIST";

    /**
     * Properties of entity HarvestList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property ExpectHarvestNum = new Property(1, long.class, "expectHarvestNum", false, "EXPECT_HARVEST_NUM");
        public final static Property VfCropsName = new Property(2, String.class, "vfCropsName", false, "VF_CROPS_NAME");
        public final static Property District = new Property(3, String.class, "district", false, "DISTRICT");
        public final static Property City = new Property(4, String.class, "city", false, "CITY");
        public final static Property VfcropsId = new Property(5, long.class, "vfcropsId", false, "VFCROPS_ID");
    };


    public HarvestListDao(DaoConfig config) {
        super(config);
    }
    
    public HarvestListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HARVEST_LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"EXPECT_HARVEST_NUM\" INTEGER NOT NULL ," + // 1: expectHarvestNum
                "\"VF_CROPS_NAME\" TEXT," + // 2: vfCropsName
                "\"DISTRICT\" TEXT," + // 3: district
                "\"CITY\" TEXT," + // 4: city
                "\"VFCROPS_ID\" INTEGER NOT NULL );"); // 5: vfcropsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HARVEST_LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HarvestList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getExpectHarvestNum());
 
        String vfCropsName = entity.getVfCropsName();
        if (vfCropsName != null) {
            stmt.bindString(3, vfCropsName);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(4, district);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
        stmt.bindLong(6, entity.getVfcropsId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HarvestList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getExpectHarvestNum());
 
        String vfCropsName = entity.getVfCropsName();
        if (vfCropsName != null) {
            stmt.bindString(3, vfCropsName);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(4, district);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
        stmt.bindLong(6, entity.getVfcropsId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public HarvestList readEntity(Cursor cursor, int offset) {
        HarvestList entity = new HarvestList( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // expectHarvestNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vfCropsName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // district
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city
            cursor.getLong(offset + 5) // vfcropsId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HarvestList entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setExpectHarvestNum(cursor.getLong(offset + 1));
        entity.setVfCropsName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistrict(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVfcropsId(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HarvestList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HarvestList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
