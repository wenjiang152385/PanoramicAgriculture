package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.DCEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DCENTITY".
*/
public class DCEntityDao extends AbstractDao<DCEntity, Long> {

    public static final String TABLENAME = "DCENTITY";

    /**
     * Properties of entity DCEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DcName = new Property(1, String.class, "dcName", false, "DC_NAME");
        public final static Property Latitude = new Property(2, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Country = new Property(5, String.class, "country", false, "COUNTRY");
        public final static Property Province = new Property(6, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(7, String.class, "city", false, "CITY");
        public final static Property District = new Property(8, String.class, "district", false, "DISTRICT");
        public final static Property Street = new Property(9, String.class, "street", false, "STREET");
        public final static Property StreetNum = new Property(10, String.class, "streetNum", false, "STREET_NUM");
        public final static Property TotalArea = new Property(11, Double.class, "totalArea", false, "TOTAL_AREA");
        public final static Property DcInfo = new Property(12, String.class, "dcInfo", false, "DC_INFO");
        public final static Property Slide1 = new Property(13, String.class, "slide1", false, "SLIDE1");
        public final static Property Slide2 = new Property(14, String.class, "slide2", false, "SLIDE2");
        public final static Property Slide3 = new Property(15, String.class, "slide3", false, "SLIDE3");
        public final static Property Slide4 = new Property(16, String.class, "slide4", false, "SLIDE4");
        public final static Property CoverageArea = new Property(17, Double.class, "coverageArea", false, "COVERAGE_AREA");
        public final static Property PhoneNum = new Property(18, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property UserId = new Property(19, Long.class, "userId", false, "USER_ID");
    };


    public DCEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DCEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DCENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DC_NAME\" TEXT," + // 1: dcName
                "\"LATITUDE\" REAL," + // 2: latitude
                "\"LONGITUDE\" REAL," + // 3: longitude
                "\"ADDRESS\" TEXT," + // 4: address
                "\"COUNTRY\" TEXT," + // 5: country
                "\"PROVINCE\" TEXT," + // 6: province
                "\"CITY\" TEXT," + // 7: city
                "\"DISTRICT\" TEXT," + // 8: district
                "\"STREET\" TEXT," + // 9: street
                "\"STREET_NUM\" TEXT," + // 10: streetNum
                "\"TOTAL_AREA\" REAL," + // 11: totalArea
                "\"DC_INFO\" TEXT," + // 12: dcInfo
                "\"SLIDE1\" TEXT," + // 13: slide1
                "\"SLIDE2\" TEXT," + // 14: slide2
                "\"SLIDE3\" TEXT," + // 15: slide3
                "\"SLIDE4\" TEXT," + // 16: slide4
                "\"COVERAGE_AREA\" REAL," + // 17: coverageArea
                "\"PHONE_NUM\" TEXT," + // 18: phoneNum
                "\"USER_ID\" INTEGER);"); // 19: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DCENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DCEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dcName = entity.getDcName();
        if (dcName != null) {
            stmt.bindString(2, dcName);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(6, country);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(7, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(9, district);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(10, street);
        }
 
        String streetNum = entity.getStreetNum();
        if (streetNum != null) {
            stmt.bindString(11, streetNum);
        }
 
        Double totalArea = entity.getTotalArea();
        if (totalArea != null) {
            stmt.bindDouble(12, totalArea);
        }
 
        String dcInfo = entity.getDcInfo();
        if (dcInfo != null) {
            stmt.bindString(13, dcInfo);
        }
 
        String slide1 = entity.getSlide1();
        if (slide1 != null) {
            stmt.bindString(14, slide1);
        }
 
        String slide2 = entity.getSlide2();
        if (slide2 != null) {
            stmt.bindString(15, slide2);
        }
 
        String slide3 = entity.getSlide3();
        if (slide3 != null) {
            stmt.bindString(16, slide3);
        }
 
        String slide4 = entity.getSlide4();
        if (slide4 != null) {
            stmt.bindString(17, slide4);
        }
 
        Double coverageArea = entity.getCoverageArea();
        if (coverageArea != null) {
            stmt.bindDouble(18, coverageArea);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(19, phoneNum);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(20, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DCEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dcName = entity.getDcName();
        if (dcName != null) {
            stmt.bindString(2, dcName);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(6, country);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(7, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(8, city);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(9, district);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(10, street);
        }
 
        String streetNum = entity.getStreetNum();
        if (streetNum != null) {
            stmt.bindString(11, streetNum);
        }
 
        Double totalArea = entity.getTotalArea();
        if (totalArea != null) {
            stmt.bindDouble(12, totalArea);
        }
 
        String dcInfo = entity.getDcInfo();
        if (dcInfo != null) {
            stmt.bindString(13, dcInfo);
        }
 
        String slide1 = entity.getSlide1();
        if (slide1 != null) {
            stmt.bindString(14, slide1);
        }
 
        String slide2 = entity.getSlide2();
        if (slide2 != null) {
            stmt.bindString(15, slide2);
        }
 
        String slide3 = entity.getSlide3();
        if (slide3 != null) {
            stmt.bindString(16, slide3);
        }
 
        String slide4 = entity.getSlide4();
        if (slide4 != null) {
            stmt.bindString(17, slide4);
        }
 
        Double coverageArea = entity.getCoverageArea();
        if (coverageArea != null) {
            stmt.bindDouble(18, coverageArea);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(19, phoneNum);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(20, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DCEntity readEntity(Cursor cursor, int offset) {
        DCEntity entity = new DCEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dcName
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // latitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // country
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // province
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // district
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // street
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // streetNum
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // totalArea
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dcInfo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // slide1
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // slide2
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // slide3
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // slide4
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // coverageArea
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // phoneNum
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DCEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDcName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCountry(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvince(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDistrict(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStreet(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStreetNum(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTotalArea(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setDcInfo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSlide1(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSlide2(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSlide3(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setSlide4(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCoverageArea(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setPhoneNum(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setUserId(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DCEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DCEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
