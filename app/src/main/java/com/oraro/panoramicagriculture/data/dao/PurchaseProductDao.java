package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.PurchaseProduct;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PURCHASE_PRODUCT".
*/
public class PurchaseProductDao extends AbstractDao<PurchaseProduct, Long> {

    public static final String TABLENAME = "PURCHASE_PRODUCT";

    /**
     * Properties of entity PurchaseProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PoNO = new Property(1, String.class, "poNO", false, "PO_NO");
        public final static Property ProductNO = new Property(2, Long.class, "productNO", false, "PRODUCT_NO");
        public final static Property Offer = new Property(3, Double.class, "offer", false, "OFFER");
        public final static Property Number = new Property(4, Double.class, "number", false, "NUMBER");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property DeadLine = new Property(6, java.util.Date.class, "deadLine", false, "DEAD_LINE");
        public final static Property Price = new Property(7, Double.class, "price", false, "PRICE");
        public final static Property LossRate = new Property(8, Double.class, "lossRate", false, "LOSS_RATE");
        public final static Property SubscribeNumber = new Property(9, Double.class, "subscribeNumber", false, "SUBSCRIBE_NUMBER");
    };


    public PurchaseProductDao(DaoConfig config) {
        super(config);
    }
    
    public PurchaseProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PURCHASE_PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PO_NO\" TEXT," + // 1: poNO
                "\"PRODUCT_NO\" INTEGER," + // 2: productNO
                "\"OFFER\" REAL," + // 3: offer
                "\"NUMBER\" REAL," + // 4: number
                "\"UNIT\" TEXT," + // 5: unit
                "\"DEAD_LINE\" INTEGER," + // 6: deadLine
                "\"PRICE\" REAL," + // 7: price
                "\"LOSS_RATE\" REAL," + // 8: lossRate
                "\"SUBSCRIBE_NUMBER\" REAL);"); // 9: subscribeNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PURCHASE_PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PurchaseProduct entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poNO = entity.getPoNO();
        if (poNO != null) {
            stmt.bindString(2, poNO);
        }
 
        Long productNO = entity.getProductNO();
        if (productNO != null) {
            stmt.bindLong(3, productNO);
        }
 
        Double offer = entity.getOffer();
        if (offer != null) {
            stmt.bindDouble(4, offer);
        }
 
        Double number = entity.getNumber();
        if (number != null) {
            stmt.bindDouble(5, number);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        java.util.Date deadLine = entity.getDeadLine();
        if (deadLine != null) {
            stmt.bindLong(7, deadLine.getTime());
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(8, price);
        }
 
        Double lossRate = entity.getLossRate();
        if (lossRate != null) {
            stmt.bindDouble(9, lossRate);
        }
 
        Double subscribeNumber = entity.getSubscribeNumber();
        if (subscribeNumber != null) {
            stmt.bindDouble(10, subscribeNumber);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PurchaseProduct entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String poNO = entity.getPoNO();
        if (poNO != null) {
            stmt.bindString(2, poNO);
        }
 
        Long productNO = entity.getProductNO();
        if (productNO != null) {
            stmt.bindLong(3, productNO);
        }
 
        Double offer = entity.getOffer();
        if (offer != null) {
            stmt.bindDouble(4, offer);
        }
 
        Double number = entity.getNumber();
        if (number != null) {
            stmt.bindDouble(5, number);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        java.util.Date deadLine = entity.getDeadLine();
        if (deadLine != null) {
            stmt.bindLong(7, deadLine.getTime());
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(8, price);
        }
 
        Double lossRate = entity.getLossRate();
        if (lossRate != null) {
            stmt.bindDouble(9, lossRate);
        }
 
        Double subscribeNumber = entity.getSubscribeNumber();
        if (subscribeNumber != null) {
            stmt.bindDouble(10, subscribeNumber);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PurchaseProduct readEntity(Cursor cursor, int offset) {
        PurchaseProduct entity = new PurchaseProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // poNO
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // productNO
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // offer
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // number
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // deadLine
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // lossRate
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9) // subscribeNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PurchaseProduct entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPoNO(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProductNO(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setOffer(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setNumber(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeadLine(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setLossRate(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setSubscribeNumber(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PurchaseProduct entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PurchaseProduct entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
