package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.FieldBorder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FIELD_BORDER".
*/
public class FieldBorderDao extends AbstractDao<FieldBorder, Void> {

    public static final String TABLENAME = "FIELD_BORDER";

    /**
     * Properties of entity FieldBorder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property BorderId = new Property(0, Long.class, "borderId", false, "BORDER_ID");
        public final static Property BorderIndex = new Property(1, int.class, "borderIndex", false, "BORDER_INDEX");
        public final static Property Latitude = new Property(2, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, Double.class, "longitude", false, "LONGITUDE");
        public final static Property FieldId = new Property(4, Long.class, "fieldId", false, "FIELD_ID");
    };


    public FieldBorderDao(DaoConfig config) {
        super(config);
    }
    
    public FieldBorderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FIELD_BORDER\" (" + //
                "\"BORDER_ID\" INTEGER," + // 0: borderId
                "\"BORDER_INDEX\" INTEGER NOT NULL ," + // 1: borderIndex
                "\"LATITUDE\" REAL," + // 2: latitude
                "\"LONGITUDE\" REAL," + // 3: longitude
                "\"FIELD_ID\" INTEGER);"); // 4: fieldId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FIELD_BORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FieldBorder entity) {
        stmt.clearBindings();
 
        Long borderId = entity.getBorderId();
        if (borderId != null) {
            stmt.bindLong(1, borderId);
        }
        stmt.bindLong(2, entity.getBorderIndex());
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }
 
        Long fieldId = entity.getFieldId();
        if (fieldId != null) {
            stmt.bindLong(5, fieldId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FieldBorder entity) {
        stmt.clearBindings();
 
        Long borderId = entity.getBorderId();
        if (borderId != null) {
            stmt.bindLong(1, borderId);
        }
        stmt.bindLong(2, entity.getBorderIndex());
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }
 
        Long fieldId = entity.getFieldId();
        if (fieldId != null) {
            stmt.bindLong(5, fieldId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FieldBorder readEntity(Cursor cursor, int offset) {
        FieldBorder entity = new FieldBorder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // borderId
            cursor.getInt(offset + 1), // borderIndex
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // latitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // fieldId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FieldBorder entity, int offset) {
        entity.setBorderId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBorderIndex(cursor.getInt(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setFieldId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FieldBorder entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FieldBorder entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
