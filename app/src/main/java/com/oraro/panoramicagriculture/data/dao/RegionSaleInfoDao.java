package com.oraro.panoramicagriculture.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.oraro.panoramicagriculture.data.entity.RegionSaleInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REGION_SALE_INFO".
*/
public class RegionSaleInfoDao extends AbstractDao<RegionSaleInfo, Void> {

    public static final String TABLENAME = "REGION_SALE_INFO";

    /**
     * Properties of entity RegionSaleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SaleInfoId = new Property(0, long.class, "saleInfoId", false, "SALE_INFO_ID");
        public final static Property SaleNumTotal = new Property(1, Double.class, "saleNumTotal", false, "SALE_NUM_TOTAL");
        public final static Property VfCropsName = new Property(2, String.class, "vfCropsName", false, "VF_CROPS_NAME");
        public final static Property District = new Property(3, String.class, "district", false, "DISTRICT");
        public final static Property City = new Property(4, String.class, "city", false, "CITY");
        public final static Property VfcropsId = new Property(5, long.class, "vfcropsId", false, "VFCROPS_ID");
    };


    public RegionSaleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public RegionSaleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REGION_SALE_INFO\" (" + //
                "\"SALE_INFO_ID\" INTEGER NOT NULL ," + // 0: saleInfoId
                "\"SALE_NUM_TOTAL\" REAL," + // 1: saleNumTotal
                "\"VF_CROPS_NAME\" TEXT," + // 2: vfCropsName
                "\"DISTRICT\" TEXT," + // 3: district
                "\"CITY\" TEXT," + // 4: city
                "\"VFCROPS_ID\" INTEGER NOT NULL );"); // 5: vfcropsId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REGION_SALE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegionSaleInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSaleInfoId());
 
        Double saleNumTotal = entity.getSaleNumTotal();
        if (saleNumTotal != null) {
            stmt.bindDouble(2, saleNumTotal);
        }
 
        String vfCropsName = entity.getVfCropsName();
        if (vfCropsName != null) {
            stmt.bindString(3, vfCropsName);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(4, district);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
        stmt.bindLong(6, entity.getVfcropsId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegionSaleInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSaleInfoId());
 
        Double saleNumTotal = entity.getSaleNumTotal();
        if (saleNumTotal != null) {
            stmt.bindDouble(2, saleNumTotal);
        }
 
        String vfCropsName = entity.getVfCropsName();
        if (vfCropsName != null) {
            stmt.bindString(3, vfCropsName);
        }
 
        String district = entity.getDistrict();
        if (district != null) {
            stmt.bindString(4, district);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(5, city);
        }
        stmt.bindLong(6, entity.getVfcropsId());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public RegionSaleInfo readEntity(Cursor cursor, int offset) {
        RegionSaleInfo entity = new RegionSaleInfo( //
            cursor.getLong(offset + 0), // saleInfoId
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // saleNumTotal
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vfCropsName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // district
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // city
            cursor.getLong(offset + 5) // vfcropsId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegionSaleInfo entity, int offset) {
        entity.setSaleInfoId(cursor.getLong(offset + 0));
        entity.setSaleNumTotal(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setVfCropsName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistrict(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCity(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVfcropsId(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(RegionSaleInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(RegionSaleInfo entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
